---
const { items } = Astro.props;
---

<div id="alphabet-buttons">
  <button id="A" class="filter_button">A</button>
  <button id="B" class="filter_button">B</button>
  <button id="C" class="filter_button">C</button>
  <button id="D" class="filter_button">D</button>
  <button id="E" class="filter_button">E</button>
  <button id="F" class="filter_button">F</button>
  <button id="G" class="filter_button">G</button>
  <button id="H" class="filter_button">H</button>
  <button id="I" class="filter_button">I</button>
  <button id="J" class="filter_button">J</button>
  <button id="K" class="filter_button">K</button>
  <button id="L" class="filter_button">L</button>
  <button id="M" class="filter_button">M</button>
  <button id="N" class="filter_button">N</button>
  <button id="O" class="filter_button">O</button>
  <button id="P" class="filter_button">P</button>
  <button id="Q" class="filter_button">Q</button>
  <button id="R" class="filter_button">R</button>
  <button id="S" class="filter_button">S</button>
  <button id="T" class="filter_button">T</button>
  <button id="U" class="filter_button">U</button>
  <button id="V" class="filter_button">V</button>
  <button id="W" class="filter_button">W</button>
  <button id="X" class="filter_button">X</button>
  <button id="Y" class="filter_button">Y</button>
  <button id="Z" class="filter_button">Z</button>
</div>

<div id="search-container">
  <input
    type="text"
    id="search-input"
    placeholder="Recherche..."
    autocomplete="off"
  />
</div>

<ul class="filtered_item_list">
  {
    items.map((item) => (
      <li class="filtered_item">
        <a href={item.link}>{item.content}</a>
      </li>
    ))
  }
</ul>

<style>
  #alphabet-buttons {
    @apply flex flex-wrap justify-start mb-4;
  }
  #alphabet-buttons button {
    @apply bg-background-alt hover:bg-background-alt-dark px-0 rounded-none w-8 dark:bg-background-alt-dark dark:hover:bg-background-alt border border-background-alt-dark dark:border-background-alt;
  }
  #alphabet-buttons button:disabled {
    @apply opacity-50;
  }
  .filtered_item_list {
    @apply flex flex-wrap justify-start list-disc p-0;
  }
  .filtered_item_list li {
    @apply w-1/2 lg:w-1/3 my-2;
  }
  .filtered_item a {
    @apply mb-4 text-color dark:text-color-light text-lg;
  }
  #search-container {
    @apply mb-4 flex justify-start
  }
  #search-input {
    @apply border px-2 py-2  rounded-sm shadow-inner w-1/2 text-lg bg-background-alt focus:outline-none focus:border-slate-400 focus:ring-0  dark:text-color-light  dark:bg-background-alt-dark;
  }
</style>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".filter_button").forEach((button) => {
      button.addEventListener("click", (event) => {
        filterItems(event.target.id);
      });
    });
    disableButtonsIfNoItem();
  });

  const filterItems = (letter) => {
    const items = document.querySelectorAll(".filtered_item");
    items.forEach((item) => {
      if (item.innerText[0].toUpperCase() === letter) {
        item.style.display = "block";
      } else {
        item.style.display = "none";
      }
    });
  };

  const disableButtonsIfNoItem = () => {
    const buttons = document.querySelectorAll(".filter_button");
    buttons.forEach((button) => {
      const letter = button.id;
      const items = document.querySelectorAll(".filtered_item");
      let hasItem = false;
      items.forEach((item) => {
        if (item.innerText[0].toUpperCase() === letter) {
          hasItem = true;
        }
      });
      button.disabled = !hasItem;
    });
  };

  document.addEventListener("DOMContentLoaded", () => {
    // Existing setup for filter buttons
    document.querySelectorAll(".filter_button").forEach((button) => {
      button.addEventListener("click", (event) => {
        filterItems(event.target.id);
      });
    });

    // New search functionality
    document
      .getElementById("search-input")
      .addEventListener("input", (event) => {
        const searchValue = event.target.value.toUpperCase();
        liveFilterSearch(searchValue);
      });

    // Disable buttons if no corresponding items exist
    disableButtonsIfNoItem();
  });

  const liveFilterSearch = (searchValue) => {
    const items = document.querySelectorAll(".filtered_item");
    items.forEach((item) => {
      if (item.innerText.toUpperCase().includes(searchValue)) {
        item.style.display = "block";
      } else {
        item.style.display = "none";
      }
    });
  };
</script>
